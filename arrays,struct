package main


import "fmt"


type Vertex struct {
    X float32
    Y string
}
func main() {
    st := Vertex{X:1, Y:"Kartheek"}
    st2 := Vertex{X:2, Y:"Kartheek2"}
    //st := Vertex{1, "Kartheek"}
    fmt.Println(st, st2)
    fmt.Println(Vertex{X:1, Y:"Kartheek"})
    
    ar := []Vertex{
        Vertex{1,"Go"},
        Vertex{2,"K8s"},
        }
    fmt.Print(ar)
}

----------------------------------------------------------------------------


package main


import "fmt"


type Vertex struct {
    X int
    Y int
}


func main() {
    v := Vertex{1, 2}
    fmt.Println(v.X, v.Y)
    v.X = 4
    fmt.Println(v.X, v.Y)


}
-----------------------------------------------------------------------------


package main


import "fmt"


type Vertex struct {
    X int
    Y int
}


func main() {
    v := Vertex{1, 2}
    p := &v
    fmt.Println(v, p, p.X, (*p).X, p.Y, (*p).Y)


    (*p).X = 2e9 //2*10^9
    //p.X =12
    fmt.Println(v)
}


-------------------------------------------------------------------------------------

package main


import "fmt"


type Vertex struct {
    X, Y int
}


var (
    v1 = Vertex{1, 2}  // has type Vertex
    v2 = Vertex{X: 1}  // Y:0 is implicit
    v3 = Vertex{}      // X:0 and Y:0
    p  = &Vertex{1, 2} // has type *Vertex
)


func main() {
    fmt.Println(v1, p, v2, v3)
}

---------------------------------------------------------------------------------------

package main


import "fmt"


func main() {
    var a [3]string
    a[0] = "Hello"
    a[1] = "World"
    a[2] = "2"
    fmt.Println(a[0]+a[1])
    for i, v:= range a{
        fmt.Println(i, v)
    }
    fmt.Println(a)


    primes := [6]int{2, 3, 5, 7, 11, 13}
    fmt.Println(primes)
}

